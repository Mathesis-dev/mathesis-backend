generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserCategoryEnum {
  TEACHER
  STUDENT
}

enum GenderEnum {
  MALE
  FEMALE
}

model User {
  id        Int              @id @default(autoincrement())
  name      String
  email     String           @unique
  password  String
  category  UserCategoryEnum
  gender    GenderEnum
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime?        @updatedAt @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")
  teacher   Teacher?
  student   Student?

  @@map("users")
}

enum SubjectEnum {
  ARTS
  BIOLOGY
  SCIENCE
  PHYSICAL_EDUCATION
  PHYSICS
  GEOGRAPHY
  HISTORY
  MATH
  PORTUGUESE
  CHEMISTRY
}

model TeachingSchedules {
  id            Int         @id @default(autoincrement())
  subject       SubjectEnum
  cost          Float
  teacherId     Int         @map("teacher_id")
  teacher       Teacher     @relation(fields: [teacherId], references: [id])
  onlineClass   Boolean     @default(true) @map("online_class")
  inPersonClass Boolean     @default(true) @map("in_person_class")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")

  @@map("teaching_schedules")
}

model Teacher {
  id            Int                 @id @default(autoincrement())
  phone         String
  biography     String
  schedules     TeachingSchedules[]
  userId        Int                 @unique @map("user_id")
  user          User                @relation(fields: [userId], references: [id])
  city          String
  state         String
  badReviews    Int                 @default(0) @map("bad_reviews")
  mediumReviews Int                 @default(0) @map("medium_reviews")
  goodReviews   Int                 @default(0) @map("good_reviews")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime?           @updatedAt @map("updated_at")
  deletedAt     DateTime?           @map("deleted_at")
  favoredBy     FavoriteTeachers[]

  @@map("teachers")
}

model Student {
  id               Int                @id @default(autoincrement())
  userId           Int                @unique @map("user_id")
  user             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime?          @updatedAt @map("updated_at")
  deletedAt        DateTime?          @map("deleted_at")
  favoriteTeachers FavoriteTeachers[]

  @@map("students")
}

model FavoriteTeachers {
  id        Int       @id @default(autoincrement())
  studentId Int       @map("student_id")
  student   Student   @relation(fields: [studentId], references: [id])
  teacherId Int       @map("teacher_id")
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("favorite_teachers")
}
